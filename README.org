* 依赖
Tools: rg fd
Fonts：Sarasa Term SC Nerd , LXGW WenKai Screen R

本配置由多种配置缝合而成，主要是在解决各种问题时积累出来的。

很多配置来源于 Github、Emacs China 等。
* 系统判定

判断是否为 Windows、Linux、Macos。
方便后续 SIS 等包使用。
号
以及，windows 有编码问题。需要
#+BEGIN_SRC emacs-lisp
  (defconst sys/win32p
    (eq system-type 'windows-nt )
    "Are we running on a WinTel system? yes")

  (defconst sys/linuxp
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst sys/macp
    (eq system-type 'darwin)
    "Are we running on a Mac system?")
  ;;windows-nt的编码问题
  (when (and (eq system-type 'windows-nt)
  	     (eq w32-ansi-code-page 65001))
    (setq w32-system-coding-system 'utf-8)
    (define-coding-system-alias 'cp65001 'utf-8)
    )

#+END_SRC

* 默认参数修改
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)                ; yes or no 改为 y or n
  ;;(setq confirm-kill-emacs #'yes-or-no-p)    ; 在关闭 Emacs 前询问是否确认关闭，防止误触
  (electric-pair-mode t)                       ; 自动补全括号
  (add-hook 'prog-mode-hook #'show-paren-mode) ; 编程模式下，光标在括号上时高亮另一个括号
  (column-number-mode t)                       ; 在 Mode line 上显示列号
  (global-auto-revert-mode t)                  ; 当另一程序修改了文件时，让 Emacs 及时刷新 Buffer
  (delete-selection-mode nil)                  ; 选中文本后输入文本会替换文本（更符合我们习惯了的其它编辑器的逻辑）
  (setq make-backup-files nil)                 ; 关闭文件自动备份
  (add-hook 'prog-mode-hook #'hs-minor-mode)   ; 编程模式下，可以折叠代码块
  ;;(global-display-line-numbers-mode 1)       ; 在 Window 显示行号
  ;;(savehist-mode 1)                          ;（可选）打开 Buffer 历史记录保存
  ;;(setq display-line-numbers-type 'relative) ;（可选）显示相对行号
  (setq-default cursor-type 'bar)              ;设置光标为竖线
  (setq mouse-yank-at-point t)                 ;避免Emacs在出错时发出声音
  (blink-cursor-mode 0)                        ;避免光标闪烁
  ;;(setq split-width-threshold 1)             ;强制左右分屏

  ;;当大于两个buffer时，删除前一个。
  (defadvice org-open-at-point (after my-org-open-at-point activate)
    (while (>  (count-windows) 2)
      (delete-window (cadr (window-list-1)))))
        ;; key bindings
  (when (eq system-type 'darwin) ;; mac specific settings
    (setq mac-option-modifier 'alt)
    (setq mac-command-modifier 'meta)
    (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
    )
  (global-set-key (kbd "C-' ") 'comment-or-uncomment-region)
#+END_SRC


* 自定义 Emacs 生成的文件位置

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `("." . ,(concat user-emacs-directory "backups")));;autosave in one dir
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file t)
#+END_SRC
* Emacs 包管理
#+BEGIN_SRC emacs-lisp
      (unless (package-installed-p 'vc-use-package)
        (package-vc-install "https://github.com/slotThe/vc-use-package"))
      (require 'package)
      (setq package-archives '(("gnu"    . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                             ("nongnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
                             ("melpa"  . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
      (when (< emacs-major-version 27)
        (package-initialize))
      (setq
       use-package-always-ensure t            ;避免每个软件包都需要加 ":ensure t"
       ;;use-package-always-defer t            ;避免每个软件包都需要加 ":defer t"
       use-package-expand-minimally t
       vc-use-package-deactivate-advice t )
   #+END_SRC

#+RESULTS:
* 字体
从 [[https://github.com/seagle0128/.emacs.d][Centaur Emacs]]抄来的。

#+BEGIN_SRC emacs-lisp

  (defun font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (find-font (font-spec :name font-name)))
  ;; Fonts
  (defun centaur-setup-fonts ()
    "Setup fonts."
    (when (display-graphic-p)
      ;; Set default font
      (cl-loop for font in '( "Sarasa Term SC Nerd" "Cascadia Code" "Fira Code" "Jetbrains Mono"
                              "SF Mono" "Hack" "Source Code Pro" "Menlo"
                              "Monaco" "DejaVu Sans Mono" "Consolas")
               when (font-installed-p font)
               return (set-face-attribute 'default nil
                                          :family font
                                          :height (cond (sys/macp 140)
                                                        (sys/win32p 110)
                                                        (t 100))
                                          ))

      ;; Set mode-line font
      ;; (cl-loop for font in '("Menlo" "SF Pro Display" "Helvetica")
      ;;          when (font-installed-p font)
      ;;          return (progn
      ;;                   (set-face-attribute 'mode-line nil :family font :height 120)
      ;;                   (when (facep 'mode-line-active)
      ;;                     (set-face-attribute 'mode-line-active nil :family font :height 120))
      ;;                   (set-face-attribute 'mode-line-inactive nil :family font :height 120)))

      ;; Specify font for all unicode characters
      (cl-loop for font in '("Segoe UI Symbol" "Symbola" "Symbol")
               when (font-installed-p font)
               return (if
  			(< emacs-major-version 27)
  			(set-fontset-font "fontset-default" 'unicode font nil 'prepend)
                        (set-fontset-font t 'symbol (font-spec :family font) nil 'prepend))))

    ;; Emoji
    (cl-loop for font in '("Noto Color Emoji" "Apple Color Emoji" "Segoe UI Emoji")
             when (font-installed-p font)
             return (cond (
  			 (< emacs-major-version 27)
  			 (set-fontset-font "fontset-default" 'unicode font nil 'prepend)
  			 )
  			(
  			 (< emacs-major-version 28)
  			 (set-fontset-font t 'symbol (font-spec :family font) nil 'prepend)
  			 )
  			(t
  			 (set-fontset-font t 'emoji (font-spec :family font) nil 'prepend))
        			)
        	   )


    ;; Specify font for Chinese characters
    (cl-loop for font in '( "LXGW WenKai Screen R" "Sarasa Term SC Nerd" "WenQuanYi Micro Hei" "PingFang SC" "Microsoft Yahei" "STFangsong")
             when (font-installed-p font)
             return (progn
                      (setq face-font-rescale-alist `((,font . 1.0)))
                      (set-fontset-font t '(#x4e00 . #x9fff) (font-spec :family font))
                      )
             )
    )


  (centaur-setup-fonts)
  (add-hook 'window-setup-hook #'centaur-setup-fonts)
  (add-hook 'server-after-make-frame-hook #'centaur-setup-fonts)

  #+END_SRC

* quelpa 来安装 github 上的包

#+BEGIN_SRC emacs-lisp
  (use-package quelpa
    :commands quelpa
     :custom
     (quelpa-git-clone-depth 1)
     (quelpa-self-upgrade-p nil)
     (quelpa-update-melpa-p nil)
     (quelpa-checkout-melpa-p nil)
     )
   (quelpa
    '(quelpa-use-package
      :fetcher git
      :url "https://github.com/quelpa/quelpa-use-package.git"))
   (require 'quelpa-use-package)
   (quelpa '(pyim-humadict :fetcher github :repo "Dasein1998/huma_pyim"))
#+END_SRC

* no-littering
#+begin_src emacs-lisp
  (use-package no-littering
    :ensure t
    :init
(require 'no-littering)
)
#+end_src

* 引入函数

#+BEGIN_SRC emacs-lisp
  ;;(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  (add-to-list 'process-coding-system-alist '("rg" utf-8 . gbk));;解决counslt-rg无法搜索中文的问题，开启默认utf-8后就不需要了。
  (set-frame-parameter (selected-frame) 'buffer-predicate
  		     (lambda (buf) (not (string-match-p "^*" (buffer-name buf)))));;only cycle through buffers whose name does not start with an *

#+END_SRC

* 自动 tangle README.org 文件为 README.el
#+BEGIN_SRC emacs-lisp
  (use-package org-auto-tangle
    :disabled t
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+END_SRC

* 主题
目前使用的是ef-theme的ef-day
#+BEGIN_SRC emacs-lisp
  (use-package ef-themes
    :ensure t
    :config
    (load-theme 'ef-day t)
    )
    #+END_SRC


* 输入时的自动化

#+BEGIN_SRC emacs-lisp
  (use-package pangu-spacing
    :disabled t
    :config
    (global-pangu-spacing-mode 1)
    (add-hook 'org-mode-hook
              '(lambda ()
                 (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)
                 ))
    (add-hook 'markdown-mode-hook
              '(lambda ()
                 (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)))
    )
  (use-package sis
    ;; :hook
    ;; enable the /context/ and /inline region/ mode for specific buffers
    ;; (((text-mode prog-mode) . sis-context-mode)
    ;;  ((text-mode prog-mode) . sis-inline-mode))

    :init
    (when (eq system-type 'gnu/linux)
      (setq sis-ism-lazyman-config "1" "2" 'fcitx5))
    (when (eq system-type 'darwin)
      (sis-ism-lazyman-config
       "com.apple.keylayout.ABC"
       "im.rime.inputmethod.Squirrel.Hans"
       )
      ;;(sis-ism-lazyman-config "1" "2" 'fcitx5)
      )
    ;;(sis-ism-lazyman-config "1033" "2052" 'im-select)
    ;; enable the /cursor color/ mode
    (sis-global-cursor-color-mode t)
    ;; enable the /respect/ mode
    (sis-global-respect-mode t)
    ;; enable the /context/ mode for all buffers
    (sis-global-context-mode t)
    ;; enable the /inline english/ mode for all buffers
    (sis-global-inline-mode t)

    )
  (use-package pyim
    :ensure t
    ;;:disabled t
    :init
    (setq default-input-method "pyim")
    :config
    (require 'pyim-humadict)
    (pyim-humadict-enable)
    (pyim-default-scheme 'huma)
    (require 'pyim-cstring-utils)
    ;;(require 'popup)
    ;;(setq pyim-page-tooltip 'popup)
    ;;(require 'posframe)
    ;;(setq pyim-page-tooltip 'posframe)

    ;; 显示 5 个候选词。
    (setq pyim-page-length 5)
    ;; 金手指设置，可以将光标处的编码（比如：拼音字符串）转换为中文。
    (global-set-key (kbd "M-j") 'pyim-convert-string-at-point)
    (global-set-key (kbd "C-\\") 'toggle-input-method)
    ;; 按 "C-<return>" 将光标前的 regexp 转换为可以搜索中文的 regexp.
    (define-key minibuffer-local-map (kbd "C-<return>") 'pyim-cregexp-convert-at-point)
    (pyim-isearch-mode 1)
    (setq-default pyim-punctuation-translate-p '(auto)) ;;中文使用全角标点，英文使用半角标点。
    (setq-default pyim-punctuation-half-width-functions
  		'(pyim-probe-punctuation-line-beginning pyim-probe-punctuation-after-punctuation));; 行首强制输入半角标点,半角标点后强制输入半角标点

    (define-key pyim-mode-map ";"
                (lambda ()
  		(interactive)
  		(pyim-select-word-by-number 2)))
    :bind
    ("M-f" . pyim-forward-word)
    ("M-b" . pyim-backward-word)
    )

    #+END_SRC


* 自动补全
** confu 配置
全局使用 confu。

#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :ensure t
    ;; Optional customizations
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin
    :init
    (global-corfu-mode)
    )
  ;; A few more useful configurations...
  (use-package emacs
    :config
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  ;; Enable Corfu completion UI
  ;; See the Corfu README for more configuration tips.
  ;; Add extensions
  (use-package cape
    :ensure t
    :after corfu
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p i" . cape-ispell)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :config
    ;; Add `completion-at-point-functions', used by `completion-at-point'.

    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+END_SRC

* 使用 Tempel 自定义补全
#+BEGIN_SRC emacs-lisp
  (use-package tempel
    ;; Require trigger prefix before template name when completing.
    ;; :custom
    ;; (tempel-trigger-prefix "<")
    :defer t
    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
           ("M-*" . tempel-insert))
    :config
    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    ;; (global-tempel-abbrev-mode)
    )

  ;; Optional: Add tempel-collection.
  ;; The package is young and doesn't have comprehensive coverage.
  (use-package tempel-collection
    :after (tempel))
#+END_SRC

* 使用 Consult 加强搜索
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :ensure t
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ("M-s o" . consult-recent-file)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history)                ;; orig. previous-matching-history-element
           )
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :config

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    (setq xref-search-program
  	(cond
  	 ((or (executable-find "ripgrep")
                (executable-find "rg"))
            'ripgrep)
  	 ((executable-find "ugrep")
            'ugrep)
  	 (t
            'grep)))
    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config
    (setq consult-async-min-input 2)
    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;;(setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;;(autoload 'projectile-project-root "projectile")
    ;;(setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
  (global-set-key (kbd "C-s")'consult-line-multi)
#+END_SRC

* 使用 vertico 加强 consult
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :config
    (vertico-mode)
    (vertico-mouse-mode)
    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)
    ;; Show more candidates
    ;; (setq vertico-count 20)
    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)
    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :hook
    (on-first-input . savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :config
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
  ;; Optionally use the `orderless' completion style.
#+END_SRC
* Orderless 提供乱序检索，加强 vertico

#+BEGIN_SRC emacs-lisp
(use-package orderless
  :ensure t
  :config
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
;(setq completion-styles '(substring orderless basic))

#+END_SRC
* 快捷键
使用 Embark
#+BEGIN_SRC emacs-lisp

(use-package embark
  :ensure t
  ;;:disabled t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :custom
  (embark-help-key "?")
  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

#+END_SRC

* Marginalia 加强 M-x 的体验
marginalia 会给函数添加一串说明文字
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :defer t
    :ensure t
    :hook
    (on-first-input . marginalia-mode)
    )
#+END_SRC

* 内置插件
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :ensure nil
    :hook (after-init . save-place-mode))
  (use-package hl-line
    :ensure nil
    :hook (after-init . global-hl-line-mode))
  (use-package delsel
    :ensure nil
    :hook (after-init . delete-selection-mode))
  (use-package recentf
    :ensure nil
    :hook (after-init . recentf-mode)
    :init
    (setq recentf-max-menu-items 99)
    (setq recentf-max-saved-items 99)
    )

  (use-package whitespace
    :ensure nil
    :hook (after-init . global-whitespace-mode) ;; 注意，这里是全局打开
    :config
    ;; Don't use different background for tabs.
    (face-spec-set 'whitespace-tab
                   '((t :background unspecified)))
    ;; Only use background and underline for long lines, so we can still have
    ;; syntax highlight.

    ;; For some reason use face-defface-spec as spec-type doesn't work.  My guess
    ;; is it's due to the variables with the same name as the faces in
    ;; whitespace.el.  Anyway, we have to manually set some attribute to
    ;; unspecified here.
    (face-spec-set 'whitespace-line
                   '((((background light))
                      :background "#d8d8d8" :foreground unspecified
                      :underline t :weight unspecified)
                     (t
                      :background "#404040" :foreground unspecified
                      :underline t :weight unspecified)))

    ;; Use softer visual cue for space before tabs.
    (face-spec-set 'whitespace-space-before-tab
                   '((((background light))
                      :background "#d8d8d8" :foreground "#de4da1")
                     (th
                      :inherit warning
                      :background "#404040" :foreground "#ee6aa7")))

    (setq
     whitespace-line-column nil
     whitespace-style
     '(face             ; visualize things below:
       empty            ; empty lines at beginning/end of buffer
    ;     lines-tail       ; lines go beyond `fill-column'
       space-before-tab ; spaces before tab
     ;  trailing         ; trailing blanks
       tabs             ; tabs (show by face)
       tab-mark         ; tabs (show by symbol)
       )))

  (add-hook 'emacs-startup-hook
            (lambda ()
              (let ((mgs-list '("You are what you do.")))
                (message (nth (random (length mgs-list)) mgs-list)))))
#+END_SRC

* Org-mode
org-mode中，尖括号<>会与()匹配。
解决方法是把<当成.来解匹配。
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    ;;:after hydra
    :config
    (setq org-modules nil)
    (require 'org-tempo)
    (setq org-src-fontify-natively t);;org内代码自动高亮
    (setq word-wrap-by-category t) ;;分词折行
    ;;(require 'org-indent)
    ;;(setq org-startup-indented t)
    (setq org-yank-image-save-method "assets/");;orgmode中，yank media的保存位置
    (add-hook 'org-mode-hook (lambda () (modify-syntax-entry ?< "." org-mode-syntax-table)));; 解决尖括号<>会与()匹配的问题。
    (add-hook 'org-mode-hook (lambda () (modify-syntax-entry ?> "." org-mode-syntax-table)))
    (setq org-persist-directory "~/.cache/.org-persist")
    :bind
    ("C-i" . cape-elisp-block)
    )
  ;;(add-hook 'org-mode-hook (lambda () (setq truncate-lines nil))) ;;自动折行
  (setq org-blank-before-new-entry '((heading . nil)
  				   (plain-list-item . auto)) ;;取消新行前的空白
        ;;:hook
        ;;(org-mode . org-num-mode)
        )
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.1))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.08))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.06))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.04))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.02))))
   '(org-level-6 ((t (:inherit outline-6 :height 1.00))))
   ) ;;heading的字体大小
  (global-set-key "\C-ca" 'org-agenda)

#+END_SRC
** 使用 olivetti 让两边留白
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :diminish
    ;;:disabled t
    :bind ("<f8>" . olivetti-mode)
    :init
    (setq olivetti-body-width 0.8)
    (defun xs-toggle-olivetti-for-org ()
      "if current buffer is org and only one visible buffer
    enable olivetti mode"
      (if (and (eq (buffer-local-value 'major-mode (current-buffer)) 'org-mode)
  	     (or (eq (length (window-list nil nil nil)) 1)
  		 (window-at-side-p (frame-first-window) 'right))) ;; frame-first-window 的 mode 是 org-mode 并且没有右边 window
  	(olivetti-mode 1)
        (olivetti-mode 0)
        (when (eq (buffer-local-value 'major-mode (current-buffer)) 'org-mode)
  	(visual-line-mode 1))))
    (add-hook 'org-mode-hook #'xs-toggle-olivetti-for-org)
    (add-hook 'window-configuration-change-hook #'xs-toggle-olivetti-for-org)
  )
#+END_SRC

** 零宽空格

#+BEGIN_SRC emacs-lisp
  ;;emacs 中文会导致 orgmode 无法正常高亮。需要添加相应的空格。
  (font-lock-add-keywords 'org-mode
  			'(("\\cc\\( \\)[/+*_=~][^a-zA-Z0-9/+*_=~\n]+?[/+*_=~]\\( \\)?\\cc?"
  			   (1 (prog1 () (compose-region (match-beginning 1) (match-end 1) ""))))
  			  ("\\cc?\\( \\)?[/+*_=~][^a-zA-Z0-9/+*_=~\n]+?[/+*_=~]\\( \\)\\cc"
  			   (2 (prog1 () (compose-region (match-beginning 2) (match-end 2) "")))))
  			'append)
  (with-eval-after-load 'ox
    (defun eli-strip-ws-maybe (text _backend _info)
      (let* ((text (replace-regexp-in-string
  		  "\\(\\cc\\) *\n *\\(\\cc\\)"
  		  "\\1\\2" text));; remove whitespace from line break
  	   ;; remove whitespace from `org-emphasis-alist'
  	   (text (replace-regexp-in-string "\\(\\cc\\) \\(.*?\\) \\(\\cc\\)"
  					   "\\1\\2\\3" text))
  	   ;; restore whitespace between English words and Chinese words
  	   (text (replace-regexp-in-string "\\(\\cc\\)\\(\\(?:<[^>]+>\\)?[a-z0-9A-Z-]+\\(?:<[^>]+>\\)?\\)\\(\\cc\\)"
  					   "\\1 \\2 \\3" text)))
        text))
    (add-to-list 'org-export-filter-paragraph-functions #'eli-strip-ws-maybe))

#+END_SRC

* org-capture

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-default-notes-file "~/org/life.org")
  (setq org-capture-templates nil)
  (add-to-list 'org-capture-templates
	       '("w" "work"
		 entry
		 (file+headline    "~/org/work.org" "Tasks"
				   )
		 "* TODO %?\n  %i  %a")
	       )
  (add-to-list 'org-capture-templates '("n" "note"
					entry
					(file "~/org/flomo.org")
					)
	       )
  (add-to-list 'org-capture-templates
	       '("f" "Flomo" entry (file "~/org/flomo.org")
		 "* %U - %^{heading}  \n %?\n"
		 :prepend t
		 ))
  (add-to-list 'org-capture-templates
	       '("j" "Journal" plain
		 (file+datetree "~/org/life.org")
		 "%<%T> %?"
		 :empty-lines 1
		 )
	       )

  (setq org-agenda-files '("~/org/work.org"
			   "~/org/life.org"
			   ))
			   #+END_SRC

** org-super-links 双向链接
#+BEGIN_SRC emacs-lisp

  (use-package org-super-links
    :quelpa (org-super-links :repo "toshism/org-super-links" :fetcher github )
    ;;:after helm
    :config
    (require 'org-id)
    (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
    :bind (("C-c s s" . org-super-links-link)
  	 ("C-c s l" . org-super-links-store-link)
  	 ("C-c s C-l" . org-super-links-insert-link)
  	 ("C-c s d" . org-super-links-quick-insert-drawer-link)
  	 ("C-c s i" . org-super-links-quick-insert-inline-link)
  	 ("C-c s C-d" . org-super-links-delete-link))
    )
#+END_SRC
* 偷懒
#+BEGIN_SRC emacs-lisp
  (use-package sort-tab
    :ensure t
    :defer t
    :vc (sort-tab :url "https://github.com/manateelazycat/sort-tab" :branch "main")
    :config
    (sort-tab-mode 1)
    )

  (use-package auto-save
    :ensure t
    :vc (auto-save :url "https://github.com/manateelazycat/auto-save" :branch "master")
    :config
    (auto-save-enable)
    (setq auto-save-silent t)   ; quietly save
    (setq auto-save-delete-trailing-whitespace t)  ; automatically delete spaces at the end of the line when saving

  ;;; custom predicates if you don't want auto save.
  ;;; disable auto save mode when current filetype is an gpg file.
    (setq auto-save-disable-predicates
  	'((lambda ()
  	    (string-suffix-p
  	     "gpg"
  	     (file-name-extension (buffer-name)) t))))
    )

  (use-package lazy-load
    :ensure t
    :vc (lazy-load :url "https://github.com/manateelazycat/lazy-load" :branch "master")
    )
  (require 'lazy-load)
  (lazy-load-global-keys
   '(
     ("M-7" . sort-tab-select-prev-tab)    ;选择前一个标签
     ("M-8" . sort-tab-select-next-tab)    ;选择后一个标签
     ("M-s-7" . sort-tab-select-first-tab) ;选择第一个标签
     ("M-s-8" . sort-tab-select-last-tab)  ;选择最后一个标签
     ;;("C-;" . sort-tab-close-current-tab)  ;关闭当前标签
     ("s-q" . sort-tab-close-other-tabs)   ;关闭后台标签
     ("s-Q" . sort-tab-close-all-tabs)     ;关闭所有标签
     )
   "sort-tab")
  (lazy-load-global-keys
   '(
     ("M-o" . ace-window))
   "ace-window"
   )
  (use-package awesome-tray
    ;;:disabled t
    :ensure t
    :defer t
    :vc (awesome-tray :url "https://github.com/manateelazycat/awesome-tray" :branch "master" )
    :config
    (setq awesome-tray-date-format nil)
    (setq awesome-tray-hide-mode-line nil)
    :hook
    (on-first-input . awesome-tray-mode)
    )
#+END_SRC
* 语言
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :defer 2
    :ensure t
    :mode ("\\.yaml\\'" . yaml-mode)
    )
  (use-package json-mode
    :ensure t
    :defer 2
    :mode ("\\.json\\'" . json-mode)
    )
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :config
    (setq markdown-command "multimarkdown")
    )
  (use-package fanyi
    :ensure t
    :defer t
    :custom
    (fanyi-providers '(;; 海词
                       fanyi-haici-provider
                       ;; 有道同义词词典
                       fanyi-youdao-thesaurus-provider
                       ;; Etymonline
                       fanyi-etymon-provider
                       ;; Longman
                       fanyi-longman-provider))
    :bind
    (("C-c C-t" . fanyi-dwim2))
    )

  (use-package aggressive-indent
    :ensure t
    :hook
    (emacs-lisp-mode . aggressive-indent-mode)
    (css-mode . aggressive-indent-mode)
    )
#+END_SRC

* 首页
首页设为 consult-recent-file。
#+BEGIN_SRC emacs-lisp
  (use-package init-open-recentf
    :disabled t
    :config
    ;;(setq init-open-recentf-interface 'consult)
    (init-open-recentf))
  ;;(add-hook 'init-open-recentf-after-hook 'your/init-func)
  (use-package benchmark-init
  :ensure t
  :config
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate)
  )
#+END_SRC

* 快捷键
open-init-file 用来快速打开此配置。
*insert* 用来加粗。（类似于 markdown 中的 C-b，给选中的文字加粗）

#+BEGIN_SRC emacs-lisp
  (defun open-init-file()
    (interactive)
    (find-file "~/.emacs.d/README.org"))

  (defun *insert* (beg end)
    "Insert * begin and the end of a char.
  use as bold in markdown"
    (interactive "r")
    (goto-char beg)
    (insert "*")
    (goto-char (1+ end))
    (insert "*"))

  (use-package which-key
    :ensure t
    :hook
    (on-first-input . which-key-mode    ))

  (use-package hydra
    :ensure t
    :defer t
    )

  (use-package use-package-hydra
    :ensure t
    :after hydra
    )

  (defhydra hydra-org (global-map "C-c o" :color pink :hint nil )
    ("b" org-backward-heading-same-level "Back")
    ("f" org-forward-heading-same-level "Forward")
    ("c" nil)
    ("s" consult-line "conSult-Line")
    ("l" org-super-links-link "link org tree")
    ("d" org-super-links-delete-link "link org tree")
    ("a" org-archive-subtree "Archive Org subtree")
    )
  ;;(global-set-key (kbd "C-z") nil)

  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+END_SRC

* windows 环境变量
#+BEGIN_SRC emacs-lisp
        (when (eq system-type 'windows-nt) ;; windows specific settings
  (setenv "PATH" (concat (getenv "PATH") ";" "C:\\Program Files\\Git\\usr\\bin")))

#+END_SRC

* dired
#+BEGIN_SRC emacs-lisp
  (use-package dired-preview
    :ensure t
    :defer t)
#+END_SRC


* 方便页内跳转和 buffer 跳转
** 使用 set-mark-command 的方法：
set-mark-command ，C-spc 可以在当前 mark
C-u C-spc 可以跳回上一个 mark 的地方。
[[http://xahlee.info/emacs/emacs/emacs_jump_to_previous_position.html][Emacs: Jump to Previous Position]]

#+BEGIN_SRC emacs-lisp

  (use-package ace-pinyin
    :ensure t
    :defer t
    :after avy
    :config
    (ace-pinyin-global-mode 1)
    )
  (use-package avy
    :ensure t
    :defer t
    :bind
    ;;(("M-j C-SPC" 、. avy-goto-char-timer))
    )
  (global-set-key (kbd "C-:")'avy-goto-char)
  (global-set-key (kbd "M-g f")'avy-goto-line)
  (global-set-key (kbd "M-g w")'avy-goto-word-1)
  ;; https://github.com/abo-abo/ace-window
  (use-package ace-window
    :ensure t
    :defer t
    :config
    (global-set-key (kbd "M-o") 'ace-window)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (defvar aw-dispatch-alist
      '((?x aw-delete-window "Delete Window")
        (?m aw-swap-window "Swap Windows")
        (?M aw-move-window "Move Window")
        (?c aw-copy-window "Copy Window")
        (?j aw-switch-buffer-in-window "Select Buffer")
        (?n aw-flip-window)
        (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
        (?c aw-split-window-fair "Split Fair Window")
        (?v aw-split-window-vert "Split Vert Window")
        (?b aw-split-window-horz "Split Horz Window")
        (?o delete-other-windows "Delete Other Windows")
        (?? aw-show-dispatch-help))
      "List of actions for `aw-dispatch-default'.")
    )
  (use-package popper
  :ensure t ;; or :straight t
  :bind (("C-`"   . popper-toggle)
         ("M-`"   . popper-cycle)
         ("C-M-`" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          ;;org-capture-mode
          help-mode
          compilation-mode
          "Capture"))
  (popper-mode +1)
  (popper-echo-mode +1))                ;; For echo area hints
#+END_SRC

* project
#+BEGIN_SRC emacs-lisp

  (use-package magit
    ;;:disabled t
    :defer t
    )

  (use-package projectile
    :defer t
    :ensure t
    :config
    (projectile-mode 1)
    )

#+END_SRC
* 优化启动速度

#+BEGIN_SRC emacs-lisp
  (use-package on
    :quelpa (on :repo "ajgrf/on.el" :fetcher github )
    )

  ;;(require 'init-dired)
  ;;(require 'init-env)
  ;;(require 'init-quelpa)
  ;;(require 'on)
  ;;(require 'init-note)
  ;;(require 'init-vertico)
  ;;(require 'init-dashboard)
  ;;(require 'init-fonts)
  ;;(require 'init-key)
  ;;(require 'init-company)
  ;;(require 'init-project)
  ;;(require 'init-consult)
  ;;(require 'init-lazy)
  ;;(require 'init-lan)
  ;;(require 'init-avy)
  ;;(require 'init-buildin)
  ;;(require 'init-elfeed)
  ;;(require 'init-embark)
#+END_SRC
